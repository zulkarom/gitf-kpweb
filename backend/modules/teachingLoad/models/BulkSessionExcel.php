<?php

namespace backend\modules\teachingLoad\models;

use Yii;
use common\models\Common;
use backend\modules\teachingLoad\models\CourseOffered;
use PhpOffice\PhpSpreadsheet\Spreadsheet;
use PhpOffice\PhpSpreadsheet\IOFactory;
use PhpOffice\PhpSpreadsheet\Style\Border;
use PhpOffice\PhpSpreadsheet\Style\Alignment;
use PhpOffice\PhpSpreadsheet\Style\Fill;
use PhpOffice\PhpSpreadsheet\Style\NumberFormat;

class BulkSessionExcel
{
	public $model;
	public $semester;
	public $sheet;
	public $courses;
	public $multiple = false;

	

	public function generateExcel(){
		$this->start();
		
		if($this->multiple){
			if($this->courses){
				$i = 0;
				foreach($this->courses as $c){
					
						$this->createCourseSheet($i);
						$this->generateSheet();
						
					
				$i++;
				}
				$this->generate(Yii::$app->params['faculty_abbr']);
			}
			$this->generate(Yii::$app->params['faculty_abbr']);
		}else{
			$this->createCourseSheet(0);
			$this->generateSheet();
			$this->generate($this->model->course->course_code);
		}
		
	}
	
	public function generateSheet(){
		
		$this->setColumWidth();
		$this->item1Name();
		
	}
	
	public function start(){
		if($this->multiple){
			$title = Yii::$app->params['faculty_abbr'];
		}else{
			$title = $this->model->course->course_name;
		}
		$this->spreadsheet = new Spreadsheet();
		$this->spreadsheet->getProperties()->setCreator('eSIAP')
			->setLastModifiedBy('eSIAP')
			->setTitle('TABLE 4 ' . $title)
			->setSubject('TABLE 4 ' . $title)
			->setDescription('TABLE 4 Generated by eSIAP Module')
			->setKeywords('TABLE 4 MAQF 2.0 Generated by eSIAP Module Skyhint Design');
	}
	

	
	public function createCourseSheet($index){
		if($index > 0){
			$this->spreadsheet->createSheet();
			$this->spreadsheet->setActiveSheetIndex($index);
		}
		
		//$this->spreadsheet->getActiveSheet()->setTitle($this->model->course->course_code);
		$this->sheet = $this->spreadsheet->getActiveSheet();
	}
	
	public function setColumWidth(){
		$normal = 24.29;//9.43
		$this->sheet->getColumnDimension('A')->setWidth(1.57);
		$this->sheet->getColumnDimension('B')->setWidth(5.57);
		$this->sheet->getColumnDimension('C')->setWidth(18.57);
		$this->sheet->getColumnDimension('D')->setWidth(50);
		$this->sheet->getColumnDimension('E')->setWidth(16.22);
		$this->sheet->getColumnDimension('F')->setWidth(16.22);
		$this->sheet->getColumnDimension('G')->setWidth($normal);
		$this->sheet->getColumnDimension('H')->setWidth(28.29);
		$this->sheet->getColumnDimension('I')->setWidth(19.29);
		$this->sheet->getColumnDimension('J')->setWidth(28.29);
		$this->sheet->getColumnDimension('K')->setWidth(19.29);
	}

	public function item1Name(){
		//ROW HEIGHT
		$this->sheet->getRowDimension('1')->setRowHeight(24);
		$this->sheet->getRowDimension('5')->setRowHeight(24);
		

			
		//CONTENT
		$this->sheet
			->setCellValue('B1', '#')
			->setCellValue('C1', 'Course Code')
			->setCellValue('D1', 'Course Name (BM)')
			->setCellValue('E1', 'Current Lectures')
			->setCellValue('F1', 'Current Tutorials')
			->setCellValue('G1', 'Total Number of Students')
			->setCellValue('H1', 'Maximum Student of a Lecture')
			->setCellValue('I1', 'Prefix Lecture Name')
			->setCellValue('J1', 'Maximum Student of a Tutorial')
			->setCellValue('K1', 'Prefix Tutorial Name');
	}
		

	
	public function generate($filename){
		

		// Set active sheet index to the first sheet, so Excel opens this as the first sheet
		$this->spreadsheet->setActiveSheetIndex(0);
		
		// Redirect output to a clientâ€™s web browser (Xls)
		header('Content-Type: application/vnd.ms-excel');
		header('Content-Disposition: attachment;filename="'.$filename.'.xls"');
		header('Cache-Control: max-age=0');
		// If you're serving to IE 9, then the following may be needed
		header('Cache-Control: max-age=1');

		// If you're serving to IE over SSL, then the following may be needed
		header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past
		header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified
		header('Cache-Control: cache, must-revalidate'); // HTTP/1.1
		header('Pragma: public'); // HTTP/1.0

		$writer = IOFactory::createWriter($this->spreadsheet, 'Xls');
		$writer->save('php://output');
		exit;
	}

}